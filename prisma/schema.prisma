// 
//The prisma schema 
//Validations refer to mechanisms that ensure data integrity and correctness before it is persisted to the database. 
//Prisma itself is an ORM (Object-Relational Mapping) tool that facilitates interaction with databases like PostgreSQL,
//and validations can be implemented at different levels: within the Prisma schema, in the application code, or at the
// database level.



generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  slug        String   @unique(map: "product_slug_idx")
  category    String
  images      String[]
  brand       String
  description String
  stock       Int
  price       Decimal  @default(0) @db.Decimal(12, 2)
  rating      Decimal  @default(0) @db.Decimal(3, 2)
  numReviews  Int      @default(0)
  isFeatured  Boolean
  banner      String?
  createdAt   DateTime @default(now()) @db.Timestamp(6)
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String    @default("NO_NAME")
  email         String    @unique(map: "user_email_idx")
  emailVerified DateTime? @db.Timestamp(6)
  image         String?
  password      String?
  role          String    @default("user")
  address       Json?     @db.Json
  paymentMethod String?
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @updatedAt
  account       Account[]
  session       Session[]
  Cart          Cart[]
}

model Account {
  userId            String   @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Cart {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String?   @db.Uuid
  sessionCartId String
  items         Json[]    @default([]) @db.Json
  itemsPrice    Decimal   @db.Decimal(12, 2)
  iitemsPrice   Decimal   @db.Decimal(12, 2)
  totalPrice    Decimal   @db.Decimal(12, 2)
  shippingPrice Decimal   @db.Decimal(12, 2)
  taxPrice      Decimal   @db.Decimal(12, 2)
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  user          User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

